{"remainingRequest":"/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/angularfire2/firestore/collection/changes.js","dependencies":[{"path":"/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/angularfire2/firestore/collection/changes.js","mtime":1516978436000},{"path":"/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/cache-loader/dist/cjs.js","mtime":1553019068977},{"path":"/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { fromCollectionRef } from '../observable/fromRef';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/scan';\nexport function docChanges(query) {\n    return fromCollectionRef(query)\n        .map(function (action) {\n        return action.payload.docChanges\n            .map(function (change) { return ({ type: change.type, payload: change }); });\n    });\n}\nexport function sortedChanges(query, events) {\n    return fromCollectionRef(query)\n        .map(function (changes) { return changes.payload.docChanges; })\n        .scan(function (current, changes) { return combineChanges(current, changes, events); }, [])\n        .map(function (changes) { return changes.map(function (c) { return ({ type: c.type, payload: c }); }); });\n}\nexport function combineChanges(current, changes, events) {\n    changes.forEach(function (change) {\n        if (events.indexOf(change.type) > -1) {\n            current = combineChange(current, change);\n        }\n    });\n    return current;\n}\nexport function combineChange(combined, change) {\n    switch (change.type) {\n        case 'added':\n            if (combined[change.newIndex] && combined[change.newIndex].doc.id == change.doc.id) {\n            }\n            else {\n                combined.splice(change.newIndex, 0, change);\n            }\n            break;\n        case 'modified':\n            if (change.oldIndex !== change.newIndex) {\n                combined.splice(change.oldIndex, 1);\n                combined.splice(change.newIndex, 0, change);\n            }\n            else {\n                combined.splice(change.newIndex, 1, change);\n            }\n            break;\n        case 'removed':\n            combined.splice(change.oldIndex, 1);\n            break;\n    }\n    return combined;\n}\n//# sourceMappingURL=changes.js.map",null]}