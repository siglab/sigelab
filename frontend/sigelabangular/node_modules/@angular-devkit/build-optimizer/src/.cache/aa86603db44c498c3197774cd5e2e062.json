{"remainingRequest":"/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/ngx-bootstrap/sortable/sortable.component.js","dependencies":[{"path":"/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/ngx-bootstrap/sortable/sortable.component.js","mtime":1520876971000},{"path":"/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/cache-loader/dist/cjs.js","mtime":1553019068977},{"path":"/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DraggableItemService } from './draggable-item.service';\n/* tslint:disable */\n/* tslint:enable */\nvar SortableComponent = /*@__PURE__*/ (function () {\n    function SortableComponent(transfer) {\n        var _this = this;\n        /** class name for items wrapper */\n        this.wrapperClass = '';\n        /** style object for items wrapper */\n        this.wrapperStyle = {};\n        /** class name for item */\n        this.itemClass = '';\n        /** style object for item */\n        this.itemStyle = {};\n        /** class name for active item */\n        this.itemActiveClass = '';\n        /** style object for active item */\n        this.itemActiveStyle = {};\n        /** class name for placeholder */\n        this.placeholderClass = '';\n        /** style object for placeholder */\n        this.placeholderStyle = {};\n        /** placeholder item which will be shown if collection is empty */\n        this.placeholderItem = '';\n        /** fired on array change (reordering, insert, remove), same as <code>ngModelChange</code>.\n         *  Returns new items collection as a payload.\n         */\n        this.onChange = new EventEmitter();\n        this.showPlaceholder = false;\n        this.activeItem = -1;\n        this.onTouched = Function.prototype;\n        this.onChanged = Function.prototype;\n        this.transfer = transfer;\n        this.currentZoneIndex = SortableComponent.globalZoneIndex++;\n        this.transfer\n            .onCaptureItem()\n            .subscribe(function (item) { return _this.onDrop(item); });\n    }\n    Object.defineProperty(SortableComponent.prototype, \"items\", {\n        get: function () {\n            return this._items;\n        },\n        set: function (value) {\n            this._items = value;\n            var out = this.items.map(function (x) { return x.initData; });\n            this.onChanged(out);\n            this.onChange.emit(out);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SortableComponent.prototype.onItemDragstart = function (event, item, i) {\n        this.initDragstartEvent(event);\n        this.onTouched();\n        this.transfer.dragStart({\n            event: event,\n            item: item,\n            i: i,\n            initialIndex: i,\n            lastZoneIndex: this.currentZoneIndex,\n            overZoneIndex: this.currentZoneIndex\n        });\n    };\n    SortableComponent.prototype.onItemDragover = function (event, i) {\n        if (!this.transfer.getItem()) {\n            return;\n        }\n        event.preventDefault();\n        var dragItem = this.transfer.captureItem(this.currentZoneIndex, this.items.length);\n        var newArray = [];\n        if (!this.items.length) {\n            newArray = [dragItem.item];\n        }\n        else if (dragItem.i > i) {\n            newArray = this.items.slice(0, i).concat([\n                dragItem.item\n            ], this.items.slice(i, dragItem.i), this.items.slice(dragItem.i + 1));\n        }\n        else {\n            // this.draggedItem.i < i\n            newArray = this.items.slice(0, dragItem.i).concat(this.items.slice(dragItem.i + 1, i + 1), [\n                dragItem.item\n            ], this.items.slice(i + 1));\n        }\n        this.items = newArray;\n        dragItem.i = i;\n        this.activeItem = i;\n        this.updatePlaceholderState();\n    };\n    SortableComponent.prototype.cancelEvent = function (event) {\n        if (!this.transfer.getItem() || !event) {\n            return;\n        }\n        event.preventDefault();\n    };\n    SortableComponent.prototype.onDrop = function (item) {\n        if (item &&\n            item.overZoneIndex !== this.currentZoneIndex &&\n            item.lastZoneIndex === this.currentZoneIndex) {\n            this.items = this.items.filter(function (x, i) { return i !== item.i; });\n            this.updatePlaceholderState();\n        }\n        this.resetActiveItem(undefined);\n    };\n    SortableComponent.prototype.resetActiveItem = function (event) {\n        this.cancelEvent(event);\n        this.activeItem = -1;\n    };\n    SortableComponent.prototype.registerOnChange = function (callback) {\n        this.onChanged = callback;\n    };\n    SortableComponent.prototype.registerOnTouched = function (callback) {\n        this.onTouched = callback;\n    };\n    SortableComponent.prototype.writeValue = function (value) {\n        var _this = this;\n        if (value) {\n            this.items = value.map(function (x, i) {\n                return ({\n                    id: i,\n                    initData: x,\n                    value: _this.fieldName ? x[_this.fieldName] : x\n                });\n            });\n        }\n        else {\n            this.items = [];\n        }\n        this.updatePlaceholderState();\n    };\n    SortableComponent.prototype.updatePlaceholderState = function () {\n        this.showPlaceholder = !this._items.length;\n    };\n    SortableComponent.prototype.getItemStyle = function (isActive) {\n        return isActive\n            ? Object.assign({}, this.itemStyle, this.itemActiveStyle)\n            : this.itemStyle;\n    };\n    // tslint:disable-next-line\n    SortableComponent.prototype.initDragstartEvent = function (event) {\n        // it is necessary for mozilla\n        // data type should be 'Text' instead of 'text/plain' to keep compatibility\n        // with IE\n        event.dataTransfer.setData('Text', 'placeholder');\n    };\n    SortableComponent.globalZoneIndex = 0;\n    return SortableComponent;\n}());\nexport { SortableComponent };\n//# sourceMappingURL=sortable.component.js.map \n",null]}