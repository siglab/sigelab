{"remainingRequest":"/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/dom-parser/lib/Dom.js","dependencies":[{"path":"/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/dom-parser/lib/Dom.js","mtime":1448744440000},{"path":"/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/cache-loader/dist/cjs.js","mtime":1553019068977},{"path":"/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var\n  tagRegExp          = /(<\\/?[a-z][a-z0-9]*(?::[a-z][a-z0-9]*)?\\s*(?:\\s+[a-z0-9-_]+=(?:(?:'[\\s\\S]*?')|(?:\"[\\s\\S]*?\")))*\\s*\\/?>)|([^<]|<(?![a-z\\/]))*/gi,\n  attrRegExp         = /\\s[a-z0-9-_]+\\b(\\s*=\\s*('|\")[\\s\\S]*?\\2)?/gi,\n  splitAttrRegExp    = /(\\s[a-z0-9-_]+\\b\\s*)(?:=(\\s*('|\")[\\s\\S]*?\\3))?/gi,\n  startTagExp        = /^<[a-z]/,\n  selfCloseTagExp    = /\\/>$/,\n  closeTagExp        = /^<\\//,\n  nodeNameExp        = /<\\/?([a-z][a-z0-9]*)(?::([a-z][a-z0-9]*))?/i,\n  attributeQuotesExp = /^('|\")|('|\")$/g,\n  noClosingTagsExp   = /^(?:area|base|br|col|command|embed|hr|img|input|link|meta|param|source)/i;\n\nvar Node = require('./Node');\n\nfunction findByRegExp(html, selector, onlyFirst) {\n\n  var\n    result        = [],\n    tagsCount     = 0,\n    tags          = html.match(tagRegExp),\n    composing     = false,\n    currentObject = null,\n    matchingSelector,\n    fullNodeName,\n    selfCloseTag,\n    attributes,\n    attrBuffer,\n    attrStr,\n    buffer,\n    tag;\n\n  for (var i = 0, l = tags.length; i < l; i++) {\n\n    tag = tags[i];\n    fullNodeName = tag.match(nodeNameExp);\n\n    matchingSelector = selector.test(tag);\n\n    if (matchingSelector && !composing){\n      composing = true;\n    }\n\n    if (composing) {\n\n      if (startTagExp.test(tag)) {\n        selfCloseTag = selfCloseTagExp.test(tag) || noClosingTagsExp.test(fullNodeName[1]);\n        attributes = [];\n        attrStr = tag.match(attrRegExp) || [];\n        for (var aI = 0, aL = attrStr.length; aI < aL; aI++) {\n          splitAttrRegExp.lastIndex = 0;\n          attrBuffer = splitAttrRegExp.exec(attrStr[aI]);\n          attributes.push({\n            name: attrBuffer[1].trim(),\n            value: (attrBuffer[2] || '').trim().replace(attributeQuotesExp, '')\n          });\n        }\n\n        ((currentObject && currentObject.childNodes) || result).push(buffer = new Node({\n          nodeType: 1, //element node\n          nodeName: fullNodeName[1],\n          namespace: fullNodeName[2],\n          attributes: attributes,\n          childNodes: [],\n          parentNode: currentObject,\n          startTag: tag,\n          selfCloseTag: selfCloseTag\n        }));\n        tagsCount++;\n\n        if (!onlyFirst && matchingSelector && currentObject){\n          result.push(buffer);\n        }\n\n        if (selfCloseTag) {\n          tagsCount--;\n        }\n        else {\n          currentObject = buffer;\n        }\n\n      }\n      else if (closeTagExp.test(tag)) {\n        if (currentObject.nodeName == fullNodeName[1]){\n          currentObject = currentObject.parentNode;\n          tagsCount--;\n        }\n      }\n      else {\n        currentObject.childNodes.push(new Node({\n          nodeType: 3,\n          text: tag,\n          parentNode: currentObject\n        }));\n      }\n\n      if (tagsCount == 0) {\n        composing = false;\n        currentObject = null;\n\n        if (onlyFirst){\n          break;\n        }\n      }\n\n    }\n\n  }\n\n  return onlyFirst ? result[0] || null : result;\n}\n\n\nfunction Dom(rawHTML) {\n  this.rawHTML = rawHTML;\n}\n\nDom.prototype.getElementsByClassName = function (className) {\n  var selector = new RegExp('class=(\\'|\")(.*?\\\\s)?' + className + '(\\\\s.*?)?\\\\1');\n  return findByRegExp(this.rawHTML, selector);\n};\n\nDom.prototype.getElementsByTagName = function (tagName) {\n  var selector = new RegExp('^<'+tagName, 'i');\n  return findByRegExp(this.rawHTML, selector);\n};\n\nDom.prototype.getElementById = function(id){\n  var selector = new RegExp('id=(\\'|\")' + id + '\\\\1');\n  return findByRegExp(this.rawHTML, selector, true);\n};\n\nDom.prototype.getElementsByName = function(name){\n  var selector = new RegExp('name=(\\'|\")' + name + '\\\\1');\n  return findByRegExp(this.rawHTML, selector);\n};\n\n\nmodule.exports = Dom;",null]}