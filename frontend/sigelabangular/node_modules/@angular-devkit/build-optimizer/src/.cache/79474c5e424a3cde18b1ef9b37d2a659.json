{"remainingRequest":"/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/ngx-editor/esm5/ngx-editor.js","dependencies":[{"path":"/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/ngx-editor/esm5/ngx-editor.js","mtime":1525410446000},{"path":"/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/cache-loader/dist/cjs.js","mtime":1553019068977},{"path":"/home/jeff/Projects/sigelab/frontend/sigelabangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, Component, Input, Output, ViewChild, EventEmitter, Renderer2, forwardRef, HostListener, NgModule } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Subject } from 'rxjs/Subject';\nimport 'rxjs/add/operator/map';\nimport { NG_VALUE_ACCESSOR, FormBuilder, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { PopoverConfig, PopoverModule } from 'ngx-bootstrap';\nimport { CommonModule } from '@angular/common';\nfunction canEnableToolbarOptions(value, toolbar) {\n    if (value) {\n        if (toolbar['length'] === 0) {\n            return true;\n        }\n        else {\n            var found = toolbar.filter(function (array) {\n                return array.indexOf(value) !== -1;\n            });\n            return found.length ? true : false;\n        }\n    }\n    else {\n        return false;\n    }\n}\nfunction getEditorConfiguration(value, ngxEditorConfig, input) {\n    for (var i in ngxEditorConfig) {\n        if (i) {\n            if (input[i] !== undefined) {\n                value[i] = input[i];\n            }\n            if (!value.hasOwnProperty(i)) {\n                value[i] = ngxEditorConfig[i];\n            }\n        }\n    }\n    return value;\n}\nfunction canResize(resizer) {\n    if (resizer === 'basic') {\n        return 'vertical';\n    }\n    return false;\n}\nfunction saveSelection() {\n    if (window.getSelection) {\n        var sel = window.getSelection();\n        if (sel.getRangeAt && sel.rangeCount) {\n            return sel.getRangeAt(0);\n        }\n    }\n    else if (document.getSelection && document.createRange) {\n        return document.createRange();\n    }\n    return null;\n}\nfunction restoreSelection(range) {\n    if (range) {\n        if (window.getSelection) {\n            var sel = window.getSelection();\n            sel.removeAllRanges();\n            sel.addRange(range);\n            return true;\n        }\n        else if (document.getSelection && range.select) {\n            range.select();\n            return true;\n        }\n    }\n    else {\n        return false;\n    }\n}\nvar Utils = Object.freeze({\n    canEnableToolbarOptions: canEnableToolbarOptions,\n    getEditorConfiguration: getEditorConfiguration,\n    canResize: canResize,\n    saveSelection: saveSelection,\n    restoreSelection: restoreSelection\n});\nvar CommandExecutorService = /*@__PURE__*/ (function () {\n    function CommandExecutorService(_http) {\n        this._http = _http;\n        this.savedSelection = undefined;\n    }\n    CommandExecutorService.prototype.execute = function (command) {\n        if (!this.savedSelection && command !== 'enableObjectResizing') {\n            throw new Error('Range out of Editor');\n        }\n        if (command === 'enableObjectResizing') {\n            document.execCommand('enableObjectResizing', true, true);\n            return;\n        }\n        if (command === 'blockquote') {\n            document.execCommand('formatBlock', false, 'blockquote');\n            return;\n        }\n        if (command === 'removeBlockquote') {\n            document.execCommand('formatBlock', false, 'div');\n            return;\n        }\n        document.execCommand(command, false, null);\n        return;\n    };\n    CommandExecutorService.prototype.insertImage = function (imageURI) {\n        if (this.savedSelection) {\n            if (imageURI) {\n                var restored = restoreSelection(this.savedSelection);\n                if (restored) {\n                    var inserted = document.execCommand('insertImage', false, imageURI);\n                    if (!inserted) {\n                        throw new Error('Invalid URL');\n                    }\n                }\n            }\n        }\n        else {\n            throw new Error('Range out of the editor');\n        }\n        return;\n    };\n    CommandExecutorService.prototype.insertVideo = function (videParams) {\n        if (this.savedSelection) {\n            if (videParams) {\n                var restored = restoreSelection(this.savedSelection);\n                if (restored) {\n                    if (this.isYoutubeLink(videParams.videoUrl)) {\n                        var youtubeURL = '<iframe width=\"' + videParams.width + '\" height=\"' + videParams.height + '\"'\n                            + 'src=\"' + videParams.videoUrl + '\"></iframe>';\n                        this.insertHtml(youtubeURL);\n                    }\n                    else if (this.checkTagSupportInBrowser('video')) {\n                        if (this.isValidURL(videParams.videoUrl)) {\n                            var videoSrc = '<video width=\"' + videParams.width + '\" height=\"' + videParams.height + '\"'\n                                + ' controls=\"true\"><source src=\"' + videParams.videoUrl + '\"></video>';\n                            this.insertHtml(videoSrc);\n                        }\n                        else {\n                            throw new Error('Invalid video URL');\n                        }\n                    }\n                    else {\n                        throw new Error('Unable to insert video');\n                    }\n                }\n            }\n        }\n        else {\n            throw new Error('Range out of the editor');\n        }\n        return;\n    };\n    CommandExecutorService.prototype.isYoutubeLink = function (url) {\n        var ytRegExp = /^(http(s)?:\\/\\/)?((w){3}.)?youtu(be|.be)?(\\.com)?\\/.+/;\n        return ytRegExp.test(url);\n    };\n    CommandExecutorService.prototype.isValidURL = function (url) {\n        var urlRegExp = /(http|https):\\/\\/(\\w+:{0,1}\\w*)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%!\\-\\/]))?/;\n        return urlRegExp.test(url);\n    };\n    CommandExecutorService.prototype.uploadImage = function (file, endPoint) {\n        if (!endPoint) {\n            throw new Error('Image Endpoint isn`t provided or invalid');\n        }\n        var formData = new FormData();\n        if (file) {\n            formData.append('file', file);\n            var req = new HttpRequest('POST', endPoint, formData, {\n                reportProgress: true\n            });\n            return this._http.request(req);\n        }\n        else {\n            throw new Error('Invalid Image');\n        }\n    };\n    CommandExecutorService.prototype.createLink = function (params) {\n        if (this.savedSelection) {\n            if (params.urlNewTab) {\n                var newUrl = '<a href=\"' + params.urlLink + '\" target=\"_blank\">' + params.urlText + '</a>';\n                if (document.getSelection().type !== 'Range') {\n                    var restored = restoreSelection(this.savedSelection);\n                    if (restored) {\n                        this.insertHtml(newUrl);\n                    }\n                }\n                else {\n                    throw new Error('Only new links can be inserted. You cannot edit URL`s');\n                }\n            }\n            else {\n                var restored = restoreSelection(this.savedSelection);\n                if (restored) {\n                    document.execCommand('createLink', false, params.urlLink);\n                }\n            }\n        }\n        else {\n            throw new Error('Range out of the editor');\n        }\n        return;\n    };\n    CommandExecutorService.prototype.insertColor = function (color, where) {\n        if (this.savedSelection) {\n            var restored = restoreSelection(this.savedSelection);\n            if (restored && this.checkSelection()) {\n                if (where === 'textColor') {\n                    document.execCommand('foreColor', false, color);\n                }\n                else {\n                    document.execCommand('hiliteColor', false, color);\n                }\n            }\n        }\n        else {\n            throw new Error('Range out of the editor');\n        }\n        return;\n    };\n    CommandExecutorService.prototype.setFontSize = function (fontSize) {\n        if (this.savedSelection && this.checkSelection()) {\n            var deletedValue = this.deleteAndGetElement();\n            if (deletedValue) {\n                var restored = restoreSelection(this.savedSelection);\n                if (restored) {\n                    if (this.isNumeric(fontSize)) {\n                        var fontPx = '<span style=\"font-size: ' + fontSize + 'px;\">' + deletedValue + '</span>';\n                        this.insertHtml(fontPx);\n                    }\n                    else {\n                        var fontPx = '<span style=\"font-size: ' + fontSize + ';\">' + deletedValue + '</span>';\n                        this.insertHtml(fontPx);\n                    }\n                }\n            }\n        }\n        else {\n            throw new Error('Range out of the editor');\n        }\n    };\n    CommandExecutorService.prototype.setFontName = function (fontName) {\n        if (this.savedSelection && this.checkSelection()) {\n            var deletedValue = this.deleteAndGetElement();\n            if (deletedValue) {\n                var restored = restoreSelection(this.savedSelection);\n                if (restored) {\n                    if (this.isNumeric(fontName)) {\n                        var fontFamily = '<span style=\"font-family: ' + fontName + 'px;\">' + deletedValue + '</span>';\n                        this.insertHtml(fontFamily);\n                    }\n                    else {\n                        var fontFamily = '<span style=\"font-family: ' + fontName + ';\">' + deletedValue + '</span>';\n                        this.insertHtml(fontFamily);\n                    }\n                }\n            }\n        }\n        else {\n            throw new Error('Range out of the editor');\n        }\n    };\n    CommandExecutorService.prototype.insertHtml = function (html) {\n        var isHTMLInserted = document.execCommand('insertHTML', false, html);\n        if (!isHTMLInserted) {\n            throw new Error('Unable to perform the operation');\n        }\n        return;\n    };\n    CommandExecutorService.prototype.isNumeric = function (value) {\n        return /^-{0,1}\\d+$/.test(value);\n    };\n    CommandExecutorService.prototype.deleteAndGetElement = function () {\n        var slectedText;\n        if (this.savedSelection) {\n            slectedText = this.savedSelection.toString();\n            this.savedSelection.deleteContents();\n            return slectedText;\n        }\n        return false;\n    };\n    CommandExecutorService.prototype.checkSelection = function () {\n        var slectedText = this.savedSelection.toString();\n        if (slectedText.length === 0) {\n            throw new Error('No Selection Made');\n        }\n        return true;\n    };\n    CommandExecutorService.prototype.checkTagSupportInBrowser = function (tag) {\n        return !(document.createElement(tag) instanceof HTMLUnknownElement);\n    };\n    return CommandExecutorService;\n}());\nvar DURATION = 7000;\nvar MessageService = /*@__PURE__*/ (function () {\n    function MessageService() {\n        this.message = new Subject();\n    }\n    MessageService.prototype.getMessage = function () {\n        return this.message.asObservable();\n    };\n    MessageService.prototype.sendMessage = function (message) {\n        this.message.next(message);\n        this.clearMessageIn(DURATION);\n        return;\n    };\n    MessageService.prototype.clearMessageIn = function (milliseconds) {\n        var _this = this;\n        setTimeout(function () {\n            _this.message.next(undefined);\n        }, milliseconds);\n        return;\n    };\n    return MessageService;\n}());\nvar ngxEditorConfig = {\n    editable: true,\n    spellcheck: true,\n    height: 'auto',\n    minHeight: '0',\n    width: 'auto',\n    minWidth: '0',\n    translate: 'yes',\n    enableToolbar: true,\n    showToolbar: true,\n    placeholder: 'Enter text here...',\n    imageEndPoint: '',\n    toolbar: [\n        ['bold', 'italic', 'underline', 'strikeThrough', 'superscript', 'subscript'],\n        ['fontName', 'fontSize', 'color'],\n        ['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'indent', 'outdent'],\n        ['cut', 'copy', 'delete', 'removeFormat', 'undo', 'redo'],\n        ['paragraph', 'blockquote', 'removeBlockquote', 'horizontalLine', 'orderedList', 'unorderedList'],\n        ['link', 'unlink', 'image', 'video']\n    ]\n};\nvar NgxEditorComponent = /*@__PURE__*/ (function () {\n    function NgxEditorComponent(_messageService, _commandExecutor, _renderer) {\n        this._messageService = _messageService;\n        this._commandExecutor = _commandExecutor;\n        this._renderer = _renderer;\n        this.resizer = 'stack';\n        this.config = ngxEditorConfig;\n        this.blur = new EventEmitter();\n        this.focus = new EventEmitter();\n        this.Utils = Utils;\n    }\n    NgxEditorComponent.prototype.onTextAreaFocus = function () {\n        this.focus.emit('focus');\n        return;\n    };\n    NgxEditorComponent.prototype.onEditorFocus = function () {\n        this.textArea.nativeElement.focus();\n    };\n    NgxEditorComponent.prototype.onContentChange = function (html) {\n        if (typeof this.onChange === 'function') {\n            this.onChange(html);\n            this.togglePlaceholder(html);\n        }\n        return;\n    };\n    NgxEditorComponent.prototype.onTextAreaBlur = function () {\n        this._commandExecutor.savedSelection = saveSelection();\n        if (typeof this.onTouched === 'function') {\n            this.onTouched();\n        }\n        this.blur.emit('blur');\n        return;\n    };\n    NgxEditorComponent.prototype.resizeTextArea = function (offsetY) {\n        var newHeight = parseInt(this.height, 10);\n        newHeight += offsetY;\n        this.height = newHeight + 'px';\n        this.textArea.nativeElement.style.height = this.height;\n        return;\n    };\n    NgxEditorComponent.prototype.executeCommand = function (commandName) {\n        try {\n            this._commandExecutor.execute(commandName);\n        }\n        catch (error) {\n            this._messageService.sendMessage(error.message);\n        }\n        return;\n    };\n    NgxEditorComponent.prototype.writeValue = function (value) {\n        this.togglePlaceholder(value);\n        if (value === null || value === undefined || value === '' || value === '<br>') {\n            value = null;\n        }\n        this.refreshView(value);\n    };\n    NgxEditorComponent.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n    };\n    NgxEditorComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    NgxEditorComponent.prototype.refreshView = function (value) {\n        var normalizedValue = value === null ? '' : value;\n        this._renderer.setProperty(this.textArea.nativeElement, 'innerHTML', normalizedValue);\n        return;\n    };\n    NgxEditorComponent.prototype.togglePlaceholder = function (value) {\n        if (!value || value === '<br>' || value === '') {\n            this._renderer.addClass(this.ngxWrapper.nativeElement, 'show-placeholder');\n        }\n        else {\n            this._renderer.removeClass(this.ngxWrapper.nativeElement, 'show-placeholder');\n        }\n        return;\n    };\n    NgxEditorComponent.prototype.getCollectiveParams = function () {\n        return {\n            editable: this.editable,\n            spellcheck: this.spellcheck,\n            placeholder: this.placeholder,\n            translate: this.translate,\n            height: this.height,\n            minHeight: this.minHeight,\n            width: this.width,\n            minWidth: this.minWidth,\n            enableToolbar: this.enableToolbar,\n            showToolbar: this.showToolbar,\n            imageEndPoint: this.imageEndPoint,\n            toolbar: this.toolbar\n        };\n    };\n    NgxEditorComponent.prototype.ngOnInit = function () {\n        this.config = this.Utils.getEditorConfiguration(this.config, ngxEditorConfig, this.getCollectiveParams());\n        this.height = this.height || this.textArea.nativeElement.offsetHeight;\n        this.executeCommand('enableObjectResizing');\n    };\n    return NgxEditorComponent;\n}());\nvar NgxGrippieComponent = /*@__PURE__*/ (function () {\n    function NgxGrippieComponent(_editorComponent) {\n        this._editorComponent = _editorComponent;\n        this.oldY = 0;\n        this.grabber = false;\n    }\n    NgxGrippieComponent.prototype.onMouseMove = function (event) {\n        if (!this.grabber) {\n            return;\n        }\n        this._editorComponent.resizeTextArea(event.clientY - this.oldY);\n        this.oldY = event.clientY;\n    };\n    NgxGrippieComponent.prototype.onMouseUp = function (event) {\n        this.grabber = false;\n    };\n    NgxGrippieComponent.prototype.onResize = function (event, resizer) {\n        this.grabber = true;\n        this.oldY = event.clientY;\n        event.preventDefault();\n    };\n    return NgxGrippieComponent;\n}());\nvar NgxEditorMessageComponent = /*@__PURE__*/ (function () {\n    function NgxEditorMessageComponent(_messageService) {\n        var _this = this;\n        this._messageService = _messageService;\n        this.ngxMessage = undefined;\n        this._messageService.getMessage().subscribe(function (message) { return _this.ngxMessage = message; });\n    }\n    NgxEditorMessageComponent.prototype.clearMessage = function () {\n        this.ngxMessage = undefined;\n        return;\n    };\n    return NgxEditorMessageComponent;\n}());\nvar NgxEditorToolbarComponent = /*@__PURE__*/ (function () {\n    function NgxEditorToolbarComponent(_popOverConfig, _formBuilder, _messageService, _commandExecutorService) {\n        this._popOverConfig = _popOverConfig;\n        this._formBuilder = _formBuilder;\n        this._messageService = _messageService;\n        this._commandExecutorService = _commandExecutorService;\n        this.uploadComplete = true;\n        this.updloadPercentage = 0;\n        this.isUploading = false;\n        this.selectedColorTab = 'textColor';\n        this.fontName = '';\n        this.fontSize = '';\n        this.hexColor = '';\n        this.isImageUploader = false;\n        this.execute = new EventEmitter();\n        this._popOverConfig.outsideClick = true;\n        this._popOverConfig.placement = 'bottom';\n        this._popOverConfig.container = 'body';\n    }\n    NgxEditorToolbarComponent.prototype.canEnableToolbarOptions = function (value) {\n        return canEnableToolbarOptions(value, this.config['toolbar']);\n    };\n    NgxEditorToolbarComponent.prototype.triggerCommand = function (command) {\n        this.execute.emit(command);\n    };\n    NgxEditorToolbarComponent.prototype.buildUrlForm = function () {\n        this.urlForm = this._formBuilder.group({\n            urlLink: ['', [Validators.required]],\n            urlText: ['', [Validators.required]],\n            urlNewTab: [true]\n        });\n        return;\n    };\n    NgxEditorToolbarComponent.prototype.insertLink = function () {\n        try {\n            this._commandExecutorService.createLink(this.urlForm.value);\n        }\n        catch (error) {\n            this._messageService.sendMessage(error.message);\n        }\n        this.buildUrlForm();\n        this.urlPopover.hide();\n        return;\n    };\n    NgxEditorToolbarComponent.prototype.buildImageForm = function () {\n        this.imageForm = this._formBuilder.group({\n            imageUrl: ['', [Validators.required]]\n        });\n        return;\n    };\n    NgxEditorToolbarComponent.prototype.buildVideoForm = function () {\n        this.videoForm = this._formBuilder.group({\n            videoUrl: ['', [Validators.required]],\n            height: [''],\n            width: ['']\n        });\n        return;\n    };\n    NgxEditorToolbarComponent.prototype.onFileChange = function (e) {\n        var _this = this;\n        this.uploadComplete = false;\n        this.isUploading = true;\n        if (e.target.files.length > 0) {\n            var file = e.target.files[0];\n            try {\n                this._commandExecutorService.uploadImage(file, this.config.imageEndPoint).subscribe(function (event) {\n                    if (event.type) {\n                        _this.updloadPercentage = Math.round(100 * event.loaded / event.total);\n                    }\n                    if (event instanceof HttpResponse) {\n                        try {\n                            _this._commandExecutorService.insertImage(event.body.url);\n                        }\n                        catch (error) {\n                            _this._messageService.sendMessage(error.message);\n                        }\n                        _this.uploadComplete = true;\n                        _this.isUploading = false;\n                    }\n                });\n            }\n            catch (error) {\n                this._messageService.sendMessage(error.message);\n                this.uploadComplete = true;\n                this.isUploading = false;\n            }\n        }\n        return;\n    };\n    NgxEditorToolbarComponent.prototype.insertImage = function () {\n        try {\n            this._commandExecutorService.insertImage(this.imageForm.value.imageUrl);\n        }\n        catch (error) {\n            this._messageService.sendMessage(error.message);\n        }\n        this.buildImageForm();\n        this.imagePopover.hide();\n        return;\n    };\n    NgxEditorToolbarComponent.prototype.insertVideo = function () {\n        try {\n            this._commandExecutorService.insertVideo(this.videoForm.value);\n        }\n        catch (error) {\n            this._messageService.sendMessage(error.message);\n        }\n        this.buildVideoForm();\n        this.videoPopover.hide();\n        return;\n    };\n    NgxEditorToolbarComponent.prototype.insertColor = function (color, where) {\n        try {\n            this._commandExecutorService.insertColor(color, where);\n        }\n        catch (error) {\n            this._messageService.sendMessage(error.message);\n        }\n        this.colorPopover.hide();\n        return;\n    };\n    NgxEditorToolbarComponent.prototype.setFontSize = function (fontSize) {\n        try {\n            this._commandExecutorService.setFontSize(fontSize);\n        }\n        catch (error) {\n            this._messageService.sendMessage(error.message);\n        }\n        this.fontSizePopover.hide();\n        return;\n    };\n    NgxEditorToolbarComponent.prototype.setFontName = function (fontName) {\n        try {\n            this._commandExecutorService.setFontName(fontName);\n        }\n        catch (error) {\n            this._messageService.sendMessage(error.message);\n        }\n        this.fontSizePopover.hide();\n        return;\n    };\n    NgxEditorToolbarComponent.prototype.onlyNumbers = function (event) {\n        return event.charCode >= 48 && event.charCode <= 57;\n    };\n    NgxEditorToolbarComponent.prototype.ngOnInit = function () {\n        this.buildUrlForm();\n        this.buildImageForm();\n        this.buildVideoForm();\n    };\n    return NgxEditorToolbarComponent;\n}());\nvar NgxEditorModule = /*@__PURE__*/ (function () {\n    function NgxEditorModule() {\n    }\n    return NgxEditorModule;\n}());\nexport { NgxEditorModule, CommandExecutorService as ɵc, MessageService as ɵb, NgxEditorMessageComponent as ɵe, NgxEditorToolbarComponent as ɵf, NgxEditorComponent as ɵa, NgxGrippieComponent as ɵd };\n//# sourceMappingURL=ngx-editor.js.map\n",null]}